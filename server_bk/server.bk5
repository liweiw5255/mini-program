const express = require('express');
const https = require('https');
const bodyParser = require('body-parser');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const sqlite3 = require('sqlite3').verbose();  // SQLite module

// HTTPS Configuration
const sslOptions = {
  key: fs.readFileSync('/etc/letsencrypt/live/wlw2ltj.online/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/wlw2ltj.online/fullchain.pem'),
};

// Initialize Express app
const app = express();
const pagesDir = path.join(__dirname, 'pages');

// Ensure directory exists
if (!fs.existsSync(pagesDir)) {
  fs.mkdirSync(pagesDir, { recursive: true });
  console.log('Created pages directory');
}

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.text());
app.use(express.static(pagesDir));

// SQLite Database
const db = new sqlite3.Database('./pages.db', (err) => {
  if (err) {
    console.error('Error opening database', err);
  } else {
    console.log('Connected to SQLite database');
    createTablesIfNeeded();
  }
});

// Function to create tables if they don't exist
function createTablesIfNeeded() {
  // PageMetadata table: Stores pageIndex and filename
  db.run(`
    CREATE TABLE IF NOT EXISTS PageMetadata (
      pageIndex INTEGER PRIMARY KEY,
      filename TEXT NOT NULL
    )
  `, (err) => {
    if (err) {
      console.error('Error creating PageMetadata table:', err);
    } else {
      console.log('PageMetadata table is ready');
    }
  });

  // PageStatus table: Stores pageIndex, sender, receiver, content, and status
  db.run(`
    CREATE TABLE IF NOT EXISTS PageStatus (
      pageIndex INTEGER PRIMARY KEY,
      sender TEXT NOT NULL,
      receiver TEXT NOT NULL,
      content TEXT NOT NULL,
      status BOOLEAN DEFAULT 1
    )
  `, (err) => {
    if (err) {
      console.error('Error creating PageStatus table:', err);
    } else {
      console.log('PageStatus table is ready');
    }
  });
}

// Root route (serves index.html)
app.get('/', (req, res) => {
  const indexPath = path.join(pagesDir, 'index.html');
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).send('Homepage not found. Please ensure index.html exists.');
  }
});

// Update page content and store data in SQLite
app.post('/api/update-page', (req, res) => {
  const { pageIndex, sender, receiver, content } = req.body;

  if (!sender || !receiver || !content) {
    return res.status(400).json({ success: false, message: 'Missing required fields: sender, receiver, content' });
  }

  // Step 1: Retrieve the filename from PageMetadata table based on pageIndex
  db.get(`
    SELECT filename FROM PageMetadata WHERE pageIndex = ?`,
    [pageIndex], (err, row) => {
      if (err || !row) {
        return res.status(404).json({ success: false, message: 'Page not found' });
      }

      const filename = row.filename;
      const filePath = path.join(pagesDir, filename);

      // Step 2: Construct HTML content for the page
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Christmas Message</title>
          <style>
            body {
              margin: 0;
              padding: 0;
              background-color: #f8f8f8;
              font-family: "Arial", sans-serif;
              display: flex;
              justify-content: center;
              align-items: center;
              height: 100vh;
            }

            .message-container {
              width: 800px;
              background-color: #fff;
              border-radius: 10px;
              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
              padding: 20px;
              text-align: center;
              position: relative;
              overflow: hidden;
            }

            .header {
              font-size: 36px;
              color: #c94e4e;
              margin-bottom: 10px;
              font-family: "Cursive", sans-serif;
            }

            .decorations {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              z-index: -1;
            }

            .decorations img {
              position: absolute;
              width: 80px;
            }

            .decoration-top-left {
              top: 20px;
              left: 20px;
            }

            .decoration-top-right {
              top: 20px;
              right: 20px;
            }

            .decoration-bottom-left {
              bottom: 20px;
              left: 20px;
            }

            .decoration-bottom-right {
              bottom: 20px;
              right: 20px;
            }

            .sender-receiver {
              margin-top: 20px;
              text-align: left;
            }

            .sender-receiver div {
              font-size: 18px;
              margin-bottom: 10px;
            }

            .message-body {
              margin-top: 20px;
              background-color: #f9f9f9;
              padding: 20px;
              border: 1px solid #ddd;
              border-radius: 10px;
              font-size: 18px;
              line-height: 1.8;
              white-space: pre-wrap; /* Preserve line breaks */
            }

            .footer {
              margin-top: 20px;
              font-size: 14px;
              color: #777;
            }
          </style>
        </head>
        <body>
          <div class="message-container">
            <div class="header">Merry Christmas</div>

            <!-- Decorations -->
            <div class="decorations">
              <img src="https://i.imgur.com/w4B0Z7B.png" class="decoration-top-left" alt="Holly">
              <img src="https://i.imgur.com/w4B0Z7B.png" class="decoration-top-right" alt="Holly">
              <img src="https://i.imgur.com/SqpKHw5.png" class="decoration-bottom-left" alt="Hat">
              <img src="https://i.imgur.com/SqpKHw5.png" class="decoration-bottom-right" alt="Hat">
            </div>

            <!-- Sender and Receiver -->
            <div class="sender-receiver">
              <div><strong>From:</strong> <span id="sender">${sender}</span></div>
              <div><strong>To:</strong> <span id="receiver">${receiver}</span></div>
            </div>

            <!-- Message Body -->
            <div class="message-body" id="message-body">
              ${content}
            </div>

            <div class="footer">
              Designed with ❤️ for the holiday season!
            </div>
          </div>
        </body>
        </html>`;
      
      // Write the updated HTML content to the file
      fs.writeFileSync(filePath, htmlContent);

      // Step 3: Update the existing page information in PageStatus table
      db.run(`
        UPDATE PageStatus
        SET sender = ?, receiver = ?, content = ?, status = ?
        WHERE pageIndex = ?`,
        [sender, receiver, content, 1, pageIndex], function(err) {
          if (err) {
            console.error('Error updating page status:', err);
            return res.status(500).json({ success: false, message: 'Error updating page status' });
          }

          // Return success response
          res.json({ success: true, message: 'Page updated successfully', pageIndex });
        });
    });
});

// Retrieve page content by uniqueId
app.get('/page/:uniqueId', (req, res) => {
  const { uniqueId } = req.params;

  // Query SQLite for the page metadata
  db.get(`
    SELECT filename FROM PageMetadata WHERE pageIndex = ?`,
    [uniqueId], (err, row) => {
      if (err || !row) {
        return res.status(404).send('Page not found');
      }

      const filePath = path.join(pagesDir, row.filename);
      if (fs.existsSync(filePath)) {
        res.sendFile(filePath);
      } else {
        res.status(404).send('File not found');
      }
    });
});

// Get page content via API
app.get('/api/get-content', (req, res) => {
  const { uniqueId } = req.query;

  // Query SQLite for page status
  db.get(`
    SELECT * FROM PageStatus WHERE pageIndex = ?`,
    [uniqueId], (err, row) => {
      if (err || !row) {
        return res.status(404).json({ success: false, message: 'Content not found' });
      }

      res.json({ success: true, content: row });
    });
});

// API to retrieve all pages with their status
app.get('/api/get-all-pages', (req, res) => {
  db.all("SELECT pageIndex, filename, status FROM PageStatus", (err, rows) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error retrieving pages' });
    }

    const pages = rows.map(row => ({
      pageIndex: row.pageIndex,
      pageAddress: `https://wlw2ltj.online/${row.filename}`,
      status: row.status ? 'Used' : 'Unused'
    }));

    res.json({ success: true, pages });
  });
});
// Get all pages in the PageStatus table
app.get('/api/get-all-content', (req, res) => {
  db.all("SELECT * FROM PageStatus", (err, rows) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error retrieving pages' });
    }

    res.json({ success: true, pages: rows });
  });
});

// Start HTTPS server
const PORT = 443;
https.createServer(sslOptions, app).listen(PORT, () => {
  console.log(`HTTPS Server running at https://wlw2ltj.online:${PORT}`);
});
